@model LagunaShoreResort2.Models.SalesContract
@using LagunaShoreResort2.Models;

@{
    ViewBag.Title = "Details";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div>

    <p class="hidden-print">
        
    @if (User.IsInRole(AccountRolesNames.ADMINISTRATOR) || User.IsInRole(AccountRolesNames.CONTRACT_MANAGER)
                                        || User.IsInRole(AccountRolesNames.CONTRACT_OFFICER))
    {
        if (User.IsInRole(AccountRolesNames.CONTRACT_OFFICER) == true && Model.verifiedByAdmin == true)
        {
        }
        else if (!(User.IsInRole(AccountRolesNames.CONTRACT_OFFICER) == true && Model.verifiedByAdmin == true))
        {
            @Html.ActionLink("Edit Contract", "Edit", new { id = Model.salesContractID }) @(" | ")
        }
        @Html.ActionLink("Client Details", "Details", "Client", new { id = Model.clientID }, null) @(" | ")
        @Html.ActionLink("HOA Deposits List", "listHOADeposits","Deposit", new { id = Model.salesContractID, contractType = Model.contractType }, null)
    }
    </p>
    <h1>Fractional Contract Details</h1>
    <div id="details" class="panel panel-info">
        <div class="panel-heading">@ViewBag.Title</div>
        <div class="panel-body row">
            <dl class="dl-horizontal col-xs-6">
                <dt>
                    @Html.DisplayNameFor(model => model.contractNumber)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.contractNumber)
                </dd>
                <dt>
                    @Html.DisplayNameFor(model => model.client.legalName)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.client.legalName)
                </dd>
                <dt>
                    @Html.DisplayNameFor(model => model.client.secondLegalName)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.client.secondLegalName)
                </dd>
                <dt>
                    @Html.DisplayNameFor(model => model.condo.name)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.condo.name)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.contractType)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.contractType)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.typeOfFraction)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.typeOfFraction)
                </dd>
                @if (Model.typeOfFraction == "1/100")
                {
                    <dt>
                        <strong>Year of Usage</strong>
                    </dt>
                    if (Model.yearEven == true)
                    {

                        <dd>
                            <strong>Even Year</strong>
                        </dd>
                    }
                    else
                    {
                        <dd>
                            <strong>Odd Year</strong>
                        </dd>
                    }
                }
                <dt>
                    @Html.DisplayNameFor(model => model.contractDate)
                </dt>

                <dd>
                    @Model.contractDate.ToShortDateString()
                </dd>               

                <dt>
                    @Html.DisplayNameFor(model => model.saleAmount)
                </dt>
                <dd>
                    @Html.DisplayFor(model => model.saleAmount)
                </dd>
                <dt>
                    @Html.DisplayNameFor(model => model.closingCost)
                </dt>
                <dd>
                    @Html.DisplayFor(model => model.closingCost)
                </dd> 
                @if (Model.deposit >    0)
                {
                    <dt>
                        @Html.DisplayNameFor(model => model.deposit)
                    </dt>
                    <dd>
                        @Html.DisplayFor(model => model.deposit)
                    </dd>
                }
                else
                {
                        double dp = (double)Model.saleAmount * .30;
                        string down = dp.ToString("#,##0.00"); 
                   
                    <dt>
                        @Html.DisplayNameFor(model => model.deposit)
                    </dt>
                    <dd>
                       @down
                    </dd> 
                    
                }

                @if (Model.previousFCID > 0 || Model.previousTMID > 0)
                { @*upgrades*@
                if (Model.previousFCID > 0)
                {
                    <dt>
                        <label>Previous Contract #</label>
                    </dt>

                        <dd>
                            @ViewBag.previoussCN
                        </dd>
                }
                if (Model.previousTMID > 0)
                {
                    <dt>
                        <label>Previous Contract #</label>
                    </dt>

                        <dd>
                            @ViewBag.previousTmCN
                        </dd>

                    }
                    <dt>
                        @Html.DisplayNameFor(model => model.newUnitPrice)
                    </dt>

                    <dd>
                        @Html.DisplayFor(model => model.newUnitPrice)
                    </dd>

                    <dt>
                        @Html.DisplayNameFor(model => model.tradeInValue)
                    </dt>

                    <dd>
                        @Html.DisplayFor(model => model.tradeInValue)
                    </dd>
                    <dt>
                        @Html.DisplayNameFor(model => model.previousBalance)
                    </dt>

                    <dd>
                        @Html.DisplayFor(model => model.previousBalance)
                    </dd>
                }
                <dt>
                    @Html.DisplayNameFor(model => model.interestRate)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.interestRate)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.verifiedByAdmin)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.verifiedByAdmin)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.verificationDate)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.verificationDate)
                </dd>


                <dt>
                    @Html.DisplayNameFor(model => model.bonusWeeks)
                </dt>
                <dd>
                    @Html.DisplayFor(model => model.bonusWeeks)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.bonusWeeksExp)
                </dt>
                <dd>
                    @Model.bonusWeeksExp.ToShortDateString()
                </dd>
                <dt>
                    @Html.DisplayNameFor(model => model.advantageWeeks)
                </dt>
                <dd>
                    @Html.DisplayFor(model => model.advantageWeeks)
                </dd>
                <dt>
                    @Html.DisplayNameFor(model => model.advantageWeeksExp)
                </dt>
                <dd>
                    @Model.advantageWeeksExp.ToShortDateString()
                </dd>
                <dt>
                    @Html.DisplayNameFor(model => model.InitialHOAMonth)
                </dt>
                <dd>
                    @Model.InitialHOAMonth.ToString("MMMM yyyy")
                </dd>
                
            </dl>
            <dl class="dl-horizontal col-xs-6">
                <dt>
                    Total Paid
                </dt>

                <dd>
                    $@String.Format("{0:n}", Deposit.getTotalPaid(Model, null, null))
                </dd>
                <dt>
                    Current Balance
                </dt>
                <dd>
                    $@String.Format("{0:n}", Deposit.getCurrentBalance(Model,null, null))
                </dd>
                <dt>
                    @Html.DisplayNameFor(model => Model.currency)
                </dt>
                <dd>
                    @Html.DisplayFor(model => Model.currency)
                </dd>
                <dt>
                    PMT
                </dt>
                <dd>
                    $@(String.Format("{0:n}", Deposit.getPMT(Model,null, null)) + " " + Model.currency)
                </dd>
                <dt>
                    @Html.DisplayNameFor(model => model.requestToAccountant)
                </dt>
                <dd>
                    @Html.DisplayFor(model => model.requestToAccountant)
                </dd>
                <dt>
                    @Html.DisplayNameFor(model => model.requestToAccountantDate)
                </dt>
                <dd>
                    @Html.DisplayFor(model => model.requestToAccountantDate)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.canceledContract)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.canceledContract)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.canceledDate)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.canceledDate)
                </dd>
                <dt>
                    @Html.DisplayNameFor(model => model.NumberofDownPayments)
                </dt>
                <dd>
                    @Html.DisplayFor(model => model.NumberofDownPayments)
                </dd>
                <dt>
                    @Html.DisplayNameFor(model => model.qualification)
                </dt>
                <dd>
                    @Html.DisplayFor(model => model.qualification)
                </dd>
                <dt>
                    @Html.DisplayNameFor(model => model.deedWeeks)
                </dt>
                <dd>
                    @Html.DisplayFor(model => model.deedWeeks)
                </dd>
                <dt>
                    @Html.DisplayNameFor(model => model.Concord)
                </dt>
                <dd>
                    @Html.DisplayFor(model => model.Concord)
                </dd>
                <dt>
                    @Html.DisplayNameFor(model => model.csToOwner)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.csToOwner)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.csToOwnerDate)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.csToOwnerDate)
                </dd>
                @*<dt>
                    @Html.DisplayNameFor(model => model.Concord)
                </dt>
                <dd>
                    @Html.DisplayFor(model => model.Concord)
                </dd>*@
                <dt>
                    @Html.DisplayNameFor(model => model.csToConcord)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.csToConcord)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.csToConcordDate)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.csToConcordDate)
                </dd>
                <dt>
                    @Html.DisplayNameFor(model => model.upgraded)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.upgraded)
                </dd>
                @if (Model.previousFCID > 0 || Model.previousTMID > 0)
                { @*upgrades*@
                   
                    <dt>
                        @Html.DisplayNameFor(model => model.upgrade)
                    </dt>

                    <dd>
                        @Html.DisplayFor(model => model.upgrade)
                    </dd>
                    

                }
                <dt>
                    @Html.DisplayNameFor(model => model.comments)
                </dt>

                <dd>
                    @Html.TextAreaFor(model => model.comments, new { @readonly = "readonly", rows = 5 })
                </dd>  
               
            </dl>
        </div>
    </div>

    <div id="panelSalesMembers" class="panel panel-info">
        <div class="panel-heading">Attachment</div>
        <div class="panel-body">
            <fieldset class="form-group">
                @Html.LabelFor(model => model.attachmentsSpanish, htmlAttributes: new { @class = "control-label" })
                <div class="col-md-12">
                    @Html.TextAreaFor(model => model.attachmentsSpanish, new { @class = "form-control", rows = 5, @readonly = "readonly" })

                </div>
            </fieldset>
            <fieldset class="form-group">
                @Html.LabelFor(model => model.attachmentsEnglish, htmlAttributes: new { @class = "control-label" })
                <div class="col-md-12">
                    @Html.TextAreaFor(model => model.attachmentsEnglish, new { @class = "form-control", rows = 5, @readonly = "readonly" })

                </div>
            </fieldset>
        </div>
    </div>

    @*Se pregunta si hay miembros de venta*@
    @if (Model.contractSalesMembers != null && Model.contractSalesMembers.Count > 0)
    {
        //Si hay miembos entonces solo lo podran personas autorizadas//
        if (User.IsInRole(AccountRolesNames.ADMINISTRATOR) || User.IsInRole(AccountRolesNames.PAYMENTS_RESERVATIONS)
     || User.IsInRole(AccountRolesNames.CONTRACT_MANAGER)
     || User.IsInRole(AccountRolesNames.CEO)
     || User.IsInRole(AccountRolesNames.ACCOUNTANT))
        {
            //Solo estos usuarios pueden hacer un comision request si el dwon payment ya se haya completado//
            if ((User.IsInRole(AccountRolesNames.ADMINISTRATOR) || User.IsInRole(AccountRolesNames.CONTRACT_MANAGER)
            || User.IsInRole(AccountRolesNames.VLO) || User.IsInRole(AccountRolesNames.ACCOUNTANT))
            && Deposit.isDownPaymentCompleted(Model,null, null))
            {
            @Html.ActionLink("Request Commision", "RequestComission", "SalesContract",
            new { id = Model.salesContractID, contractType = Model.contractType }, new { @class = "btn btn-small btn-primary" })
            }
        <div id="panelSalesMembers" class="panel panel-info">
            <div class="panel-heading">Sales Members</div>
            <div class="panel-body">
                <table id="depositsPaymentsTable" class="table-responsive table-striped">
                    <tr>
                        <th>@Html.DisplayNameFor(model => Model.contractSalesMembers.FirstOrDefault().rol.type)</th>
                        <th>@Html.DisplayNameFor(model => Model.contractSalesMembers.FirstOrDefault().rol.comssion)</th>
                        <th>Legal Name</th>
                    </tr>
                    @foreach (ContractSalesMember csm in Model.contractSalesMembers)
                    {
                        <tr>
                            <td>@csm.rol.type</td>
                            <td>@csm.rol.comssion%</td>
                            <td>@(csm.salesMember.firtName + " " + csm.salesMember.lastName)</td>
                        </tr>
                    }
                </table>
            </div>
        </div>
        }
    }
    @if (User.IsInRole(AccountRolesNames.ADMINISTRATOR) || User.IsInRole(AccountRolesNames.PAYMENTS_RESERVATIONS)
     || User.IsInRole(AccountRolesNames.CONTRACT_MANAGER)
     || User.IsInRole(AccountRolesNames.CEO) || User.IsInRole(AccountRolesNames.SALES_MANAGER)
     || User.IsInRole(AccountRolesNames.VLO) || User.IsInRole(AccountRolesNames.CONCIERGE)
     || User.IsInRole(AccountRolesNames.ACCOUNTANT) || User.IsInRole(AccountRolesNames.OWNER_SERVICES))
    { 
    <div id="panelDepositDetails" class="panel panel-info">
        <div class="panel-heading">Amortization Schedule</div>
        <div class="panel-body">
            <table class="table-responsive table-striped col-xs-12">
                <tr>
                    <th>No.</th>
                    <th>Date To Pay</th>
                    <th>Principal</th>
                    <th>Interest</th>
                    <th>Remaining Principal</th>
                    <th>Remaining Interest</th>
                    <th>Deposit</th>
                    <th>Balance</th>
                    <th>No. Folio</th>
                    <th>Ref. Number</th>
                    <th>Payment Type</th>
                </tr>
                @foreach (PaymentDeposits pd in ViewBag.payments)
                {
                    <tr>
                        <td>@pd.payment.paymentNumber</td>
                        <td>@pd.payment.dateToPay.ToShortDateString()</td>
                        <td>@String.Format("{0:n}", pd.payment.Amortization)</td>
                        <td>@String.Format("{0:n}", pd.payment.Interest)</td>
                        <td>@String.Format("{0:n}", pd.remainingAmortization)</td>
                        <td>@String.Format("{0:n}", pd.remainingInterest)</td>
                        <td>@String.Format("{0:n}", pd.deposit.getAmountInContractCurrency(Model.currency))</td>
                        <td>@String.Format("{0:n}", pd.balance)</td>
                        <td>
                            @if (pd.deposit.noFolio == 0)
                            {
                                @Html.Raw("--");
                            }
                            else
                            {
                                @pd.deposit.noFolio
                            }
                        </td>
                        <td>@pd.deposit.RefNumber</td>
                        <td>@pd.payment.paymentType</td>
                    </tr>
                }
            </table>
        </div>
    </div>
    }
    @if (User.Identity.IsAuthenticated)
    {
        ViewBag.contractID = Model.salesContractID;
        ViewBag.contractType = Model.contractType;
        var deposits = Model.deposits.Where(dep => !dep.Refund).OrderBy(dep => dep.DepositDate);
        @Html.Partial("../Deposit/Partial_Generic_DepositList",deposits)
    }
</div>
